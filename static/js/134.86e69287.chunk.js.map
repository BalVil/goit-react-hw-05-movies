{"version":3,"file":"static/js/134.86e69287.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","pages/Movies.jsx","services/themoviedb-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MovieList_title__QyMtJ\",\"ul\":\"MovieList_ul__tWrRZ\",\"li\":\"MovieList_li__kXkJl\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styles from './MovieList.module.css';\n\nconst MovieList = ({ movies, titlePage }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {titlePage && <h1 className={styles.title}>{titlePage}</h1>}\n\n      <ul className={styles.ul}>\n        {movies.map(({ id, title, name }) => (\n          <li key={id} className={styles.li}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title || name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    }).isRequired\n  ),\n  titlePage: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from '../services/themoviedb-api';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const [searchValue, setSearchValue] = useState(query);\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (query === '') return;\n\n    setLoading(true);\n\n    fetchSearchMovies(query)\n      .then(data => {\n        setMovies(data.results);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(true);\n        setLoading(false);\n        console.log(error);\n      });\n  }, [query]);\n\n  const handleChange = e => {\n    setSearchValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const queryNormalized = e.target.query.value.toLowerCase().trim();\n    setSearchParams({ query: queryNormalized });\n  };\n\n  const showNoMovie = movies && movies.length < 1 && !loading;\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            onChange={handleChange}\n            value={searchValue}\n            type=\"text\"\n            name=\"query\"\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {loading && <h3>Loading...</h3>}\n      {error && <h3>Something went wrong. Try changing the query</h3>}\n      {movies && <MovieList movies={movies} />}\n      {showNoMovie && (\n        <h3>\n          Sorry, there are no movies matching your search query. Please change\n          the request\n        </h3>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=5f364d2fc6b25c805674b50a1c63d59e';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchMovies = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?${API_KEY}&query=${query}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n"],"names":["movies","titlePage","location","useLocation","className","styles","map","id","title","name","to","state","from","useSearchParams","searchParams","setSearchParams","query","get","useState","searchValue","setSearchValue","setMovies","loading","setLoading","error","setError","useEffect","fetchSearchMovies","then","data","results","catch","console","log","showNoMovie","length","onSubmit","e","preventDefault","queryNormalized","target","value","toLowerCase","trim","autoComplete","onChange","type","BASE_URL","API_KEY","fetchTrending","axios","response","fetchMovieDetails","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}