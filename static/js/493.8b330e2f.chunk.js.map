{"version":3,"file":"static/js/493.8b330e2f.chunk.js","mappings":"wMAGaA,EAAuB,SAAAC,GAClC,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,WACRN,EAAMI,GACHG,MAAK,SAAAC,GACJL,EAAUK,EACX,IACAC,MAAMC,QAAQC,IAClB,GAAE,CAACX,EAAOI,IACJF,CACR,C,+DCkBD,UA9Ba,WACX,IAAMU,GAAOb,EAAAA,EAAAA,GAAqBc,EAAAA,IAElC,OACE,iCACID,IAAQ,uCACTA,GAAQA,EAAKE,OAAS,GACrB,wBACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,0BACGF,GACC,gBACEG,IAAKF,EACLG,IAAG,yCAAoCJ,GACvCK,MAAM,SAGR,uCAEF,uBAAIJ,KACJ,uCAAeC,OAXRH,EADD,OAiBZ,sEAIP,C,4MC9BKO,EAAW,+BACXC,EAAU,2CAEHC,EAAa,mCAAG,oGACJC,IAAAA,IAAA,UAAaH,EAAb,+BAA4CC,IADxC,cACrBG,EADqB,yBAEpBA,EAASnB,KAAKoB,SAFM,2CAAH,qDAKbC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,IAAAA,IAAA,UAClBH,EADkB,yBACOC,EADP,kBACwBM,EADxB,oBADQ,cACzBH,EADyB,yBAIxBA,EAASnB,MAJe,2CAAH,sDAOjBuB,EAAiB,mCAAG,WAAMf,GAAN,uFACRU,IAAAA,IAAA,UAClBH,EADkB,kBACAP,EADA,YACMQ,EADN,oBADQ,cACzBG,EADyB,yBAIxBA,EAASnB,MAJe,2CAAH,sDAOjBK,EAAc,mCAAG,WAAMG,GAAN,uFACLU,IAAAA,IAAA,UAClBH,EADkB,kBACAP,EADA,oBACcQ,EADd,oBADK,cACtBG,EADsB,yBAIrBA,EAASnB,KAAKI,MAJO,2CAAH,sDAOdoB,EAAiB,mCAAG,WAAMhB,GAAN,uFACRU,IAAAA,IAAA,UAClBH,EADkB,kBACAP,EADA,oBACcQ,EADd,oBADQ,cACzBG,EADyB,yBAIxBA,EAASnB,KAAKoB,SAJU,2CAAH,qD","sources":["hooks/useAdditionalToMovie.js","pages/Cast.jsx","services/themoviedb-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useAdditionalToMovie = fetch => {\n  const [option, setOption] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetch(movieId)\n      .then(data => {\n        setOption(data);\n      })\n      .catch(console.log);\n  }, [fetch, movieId]);\n  return option;\n};\n","import { fetchMovieCast } from '../services/themoviedb-api';\nimport { useAdditionalToMovie } from '../hooks/useAdditionalToMovie';\n\nconst Cast = () => {\n  const cast = useAdditionalToMovie(fetchMovieCast);\n\n  return (\n    <>\n      {!cast && <h3>Loading...</h3>}\n      {cast && cast.length > 0 ? (\n        <ul>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              {profile_path ? (\n                <img\n                  alt={name}\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  width=\"200\"\n                />\n              ) : (\n                <div>No image</div>\n              )}\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <div>We don`t have any cast for this movie.</div>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=5f364d2fc6b25c805674b50a1c63d59e';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchMovies = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?${API_KEY}&query=${query}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n"],"names":["useAdditionalToMovie","fetch","useState","option","setOption","movieId","useParams","useEffect","then","data","catch","console","log","cast","fetchMovieCast","length","map","id","profile_path","name","character","alt","src","width","BASE_URL","API_KEY","fetchTrending","axios","response","results","fetchSearchMovies","query","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}